---
import { getCollection, getEntry } from "astro:content";
import Nav from "../components/Nav.astro";
import JoinChatCard from "../components/JoinChatCard.astro";
import "../styles/global.css";
import { stripBase, withBase } from "../utils/paths";

interface Breadcrumb {
  label: string;
  href?: string;
}

interface Props {
  title?: string;
  description?: string;
  breadcrumbs?: Breadcrumb[];
  hideSidebar?: boolean;
}

const rawTitle = Astro.props.title ?? "ComfyUI小白入门";
const pageTitle = rawTitle + " | ComfyUI小白入门";
const metaDescription =
  Astro.props.description ?? "一份针对新手的 ComfyUI 工作流指南：拆解核心概念，搭建文本到图片流水线，并学会复用社区模板。";
const breadcrumbs = Astro.props.breadcrumbs ?? [];
const hideSidebar = Astro.props.hideSidebar ?? false;
const chapters = (await getCollection("tutorial")).sort((a, b) => a.data.order - b.data.order);
const siteEntry = await getEntry("site", "resources").catch(() => null);
const quickLinks = siteEntry?.data.quickLinks ?? { enabled: true, title: "资源速达", items: [] };
const currentPath = stripBase(Astro.url.pathname);
const normalizedPath = (() => {
  const trimmed = currentPath.replace(/\/$/, "") || "/";
  if (trimmed === "/") {
    return "/";
  }
  return trimmed.startsWith("/") ? trimmed : `/${trimmed}`;
})();
const resolveUrl = (value?: string | null) => withBase(value) ?? value ?? undefined;
---
<!DOCTYPE html>
<html lang="zh-CN" class="scroll-smooth">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <title>{pageTitle}</title>
    <meta name="description" content={metaDescription} />
    <script is:inline>
      (function () {
        const storageKey = "comfyui-guide-theme";
        const root = document.documentElement;
        let mode = "light";
        try {
          const saved = localStorage.getItem(storageKey);
          if (saved) {
            mode = saved;
          } else if (window.matchMedia && window.matchMedia("(prefers-color-scheme: dark)").matches) {
            mode = "dark";
          }
        } catch (error) {
          mode = "light";
        }
        root.classList.remove("light", "dark");
        root.classList.add(mode);
        root.style.colorScheme = mode;
      })();
    </script>
  </head>
  <body class="min-h-screen bg-surface-light text-slate-900 transition-colors dark:bg-surface-dark dark:text-slate-100">
    <a
      href="#main"
      class="sr-only focus:not-sr-only focus:absolute focus:top-4 focus:left-4 focus:rounded-md focus:bg-white focus:px-4 focus:py-2 focus:text-primary"
    >
      跳到主要内容
    </a>
    <header class="sticky top-0 z-40 border-b border-slate-200 bg-surface-light/95 backdrop-blur dark:border-slate-700 dark:bg-surface-dark/90">
      <div class="mx-auto flex max-w-6xl items-center justify-between px-6 py-4">
        <a href={resolveUrl("/")} class="text-lg font-semibold text-primary transition hover:text-primary-light">ComfyUI小白入门</a>
        <Nav />
      </div>
    </header>
    <main id="main" class="mx-auto w-full max-w-6xl px-6 py-12">
      <div class={hideSidebar ? "grid gap-10" : "grid gap-10 lg:grid-cols-[240px_minmax(0,1fr)]"}>
        {!hideSidebar && (
          <aside
            class="hidden lg:flex lg:flex-col lg:gap-10 lg:sticky lg:top-28 lg:h-[calc(100vh-7rem)] lg:overflow-y-auto lg:pr-8 lg:border-r lg:border-slate-200 dark:lg:border-slate-700"
            data-scroll-spy
          >
            <div>
              <p class="text-xs font-semibold uppercase tracking-[0.32em] text-slate-400">学习目录</p>
              <nav class="mt-4 space-y-1 text-sm">
                <a
                  href={resolveUrl("/")}
                  class="sidebar-link"
                  data-chapter-link="__home"
                  data-active={normalizedPath == "/" ? "true" : "false"}
                  aria-current={normalizedPath == "/" ? "page" : undefined}
                >
                  站点概览
                </a>
                {chapters.map((chapter) => {
                  const chapterPath = "/tutorial/" + chapter.slug + "/";
                  const chapterHref = resolveUrl(chapterPath);
                  const normalizedChapterPath = chapterPath.replace(/\/$/, "");
                  const isActive =
                    normalizedPath === normalizedChapterPath || normalizedPath.startsWith(`${normalizedChapterPath}/`);
                  return (
                    <a
                      href={chapterHref}
                      class="sidebar-link"
                      data-chapter-link={chapter.slug}
                      data-active={isActive ? "true" : "false"}
                      aria-current={isActive ? "page" : undefined}
                    >
                      {chapter.data.title}
                    </a>
                  );
                })}
              </nav>
            </div>
            {quickLinks.enabled && quickLinks.items.length > 0 && (
              <div class="rounded-xl border border-primary/25 bg-primary/5 p-4 text-xs text-slate-600 shadow-sm dark:border-primary/40 dark:bg-primary/10 dark:text-slate-200">
                <p class="font-semibold text-primary">{quickLinks.title}</p>
                <ul class="mt-3 space-y-2">
                  {quickLinks.items.map((item) => {
                    const href = item.external ? item.url : resolveUrl(item.url);
                    return (
                      <li>
                        <a
                          class="flex items-center justify-between rounded-lg px-3 py-2 hover:text-primary"
                          href={href}
                          rel={item.external ? "noreferrer" : undefined}
                          target={item.external ? "_blank" : undefined}
                        >
                          {item.label}
                          <span aria-hidden="true">{item.icon ?? (item.external ? "↗" : "→")}</span>
                        </a>
                      </li>
                    );
                  })}
                </ul>
              </div>
            )}
            <div class="mt-10 lg:mt-auto lg:sticky lg:bottom-6">
              <JoinChatCard />
            </div>
          </aside>
        )}
        <div class="space-y-8">
          {breadcrumbs.length > 0 && (
            <nav aria-label="面包屑" class="text-xs text-slate-500 dark:text-slate-400">
              <ol class="flex flex-wrap items-center gap-2">
                {breadcrumbs.map((crumb, index) => (
                  <li class="flex items-center gap-2">
                    {crumb.href ? (
                      <a class="underline-offset-2 hover:text-primary hover:underline" href={resolveUrl(crumb.href)}>{crumb.label}</a>
                    ) : (
                      <span>{crumb.label}</span>
                    )}
                    {index < breadcrumbs.length - 1 && <span class="text-slate-300 dark:text-slate-600">/</span>}
                  </li>
                ))}
              </ol>
            </nav>
          )}
          <slot />
        </div>
      </div>
    </main>
    <footer class="border-t border-slate-200 bg-muted-light py-8 text-sm text-slate-500 dark:border-slate-700 dark:bg-muted-dark dark:text-slate-400">
      <div class="mx-auto flex max-w-6xl flex-col gap-2 px-6 sm:flex-row sm:items-center sm:justify-between">
        <p>&copy; {new Date().getFullYear()} ComfyUI小白入门 · 保持好奇，持续打磨工作流。</p>
        <p>
          <a class="hover:text-primary" href="https://github.com/shaunsonggit/ComfyUI-Beginners-Guide" rel="noreferrer">贡献与反馈</a>
        </p>
      </div>
    </footer>
    <script is:inline>
      (() => {
        const aside = document.querySelector('[data-scroll-spy]');
        if (!aside) return;
        const navLinks = Array.from(aside.querySelectorAll('[data-chapter-link]'));
        if (!navLinks.length) return;
        const sections = Array.from(document.querySelectorAll('[data-chapter-id]'));
        if (!sections.length || typeof IntersectionObserver === 'undefined') return;

        const activate = (slug) => {
          navLinks.forEach((link) => {
            const active = link.dataset.chapterLink === slug;
            link.dataset.active = active ? 'true' : 'false';
            if (active) {
              link.setAttribute('aria-current', 'page');
            } else {
              link.removeAttribute('aria-current');
            }
          });
        };

        const observer = new IntersectionObserver(
          (entries) => {
            entries.forEach((entry) => {
              if (entry.isIntersecting) {
                const slug = entry.target.getAttribute('data-chapter-id');
                if (slug) {
                  activate(slug);
                }
              }
            });
          },
          { rootMargin: '0px 0px -55% 0px', threshold: [0.1, 0.25] }
        );

        sections.forEach((section) => observer.observe(section));

        const initialHash = decodeURIComponent(location.hash.replace('#', ''));
        if (initialHash) {
          activate(initialHash);
        } else {
          const firstVisible = sections.find((section) => section.getBoundingClientRect().top >= 0);
          if (firstVisible) {
            const slug = firstVisible.getAttribute('data-chapter-id');
            if (slug) activate(slug);
          }
        }

        window.addEventListener('hashchange', () => {
          const hashSlug = decodeURIComponent(location.hash.replace('#', ''));
          if (hashSlug) activate(hashSlug);
        });
      })();
    </script>
  </body>
</html>

